#include <stdio.h>

int main(void) {
	uint32_t *regmap = (uint32_t *) 0x70000000;
	// REGMAP:
	// 	#	bits	in		out
	//	0	32		R		A
	//	1	32				B
	//	2	4				SHAMT
	//	3	3				ALUOp
	//	4	1		Zero
	//	5	1		Overflow
	int z, v, r;
	// add signed
	regmap[3] = 0b0100;
	regmap[0] = 0x000001BA;
	regmap[1] = 0xFFFFEE4B;
	regmap[2] = 0b00000;
	z = regmap[4];
	v = regmap[5];
	r = regmap[0];
	printf("\nCase 1: Z: %s, O: %s, R: %s\n", (z==0?"C":"E"),(v==0?"C":"E"),(r==0xFFFFF005?"C":"E"));
	// add signed
	regmap[3] = 0b0101;
	regmap[0] = 0xF0000000;
	regmap[1] = 0x0000000F;
	regmap[2] = 0b00000;
	z = regmap[4];
	v = regmap[5];
	r = regmap[0];
	printf("\nCase 2: Z: %s, O: %s, R: %s\n", (z==0?"C":"E"),(v==0?"C":"E"),(r==0xF000000F?"C":"E"));
	// bitwise and
	regmap[3] = 0b0000;
	regmap[0] = 0xFFFF0000;
	regmap[1] = 0x00FFFF00;
	regmap[2] = 0b00000;
	z = regmap[4];
	v = regmap[5];
	r = regmap[0];
	printf("\nCase 3: Z: %s, O: %s, R: %s\n", (z==0?"C":"E"),(v==0?"C":"E"),(r==0x00FF0000?"C":"E"));
	// bitwise nor
	regmap[3] = 0b0011;
	regmap[0] = 0xFFFF0000;
	regmap[1] = 0x00FFFF00;
	regmap[2] = 0b00000;
	z = regmap[4];
	v = regmap[5];
	r = regmap[0];
	printf("\nCase 4: Z: %s, O: %s, R: %s\n", (z==0?"C":"E"),(v==0?"C":"E"),(r==0x000000FF?"C":"E"));

	return 0;
}
